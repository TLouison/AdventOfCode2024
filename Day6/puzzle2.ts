const inputMap: string = `................#......#...........#...........................#......#...........#........................................#......
  .......................................................................................#........#............#.............#.....#
  #.......................#...#..........#...........#........#.......................#............#................................
  .............#...............................................#........#................................#....#......#..............
  ...#..................................#......................#....#....................................#.................#........
  ...................#.....#......#...........#............................#......................#.#........................#......
  ...........................#..#...........#.............................#.........#.##.............#..............................
  .#.................#................#..........##.........##..............#...................................................#...
  ...............................#......................#........#.......................#.........#...........#....................
  ...................................#................#.............................................................................
  ..#...............##.......#................#.#......#...........#................................................................
  ....#.#.....#..............#........##........................##...........................................#...............#......
  .....................#..........#.................................#.....................................#.........................
  ..............#.........................................##......#.......................#..............#.................#..#.....
  ...........#...#..........................................................#.......#.............................#................#
  ................................#.#...............#...............................#..............##...............................
  .........................................................#............#......................................#.................#..
  ......#.#....#.................................#....###..................#......#.........#....#..................................
  ..............#...................................#..........#............#.......#...............................................
  ..............#......#...............#.............................................#.............................................#
  ....#.#..............#................#......................................................................#....................
  ........................................................#...........#..#.#.....................#....#.....#........#...#.......#..
  ..............#.......#................#............................#..#.......#.........#...........#...#...#....#....#.....#....
  ...#...............................................................................................#..#..#..........#.............
  .......#.........#..###..................................##...............##..#.......................#..........#...........#...#
  .......#.....................#.............#...........#...............................................#.................#........
  ..........#............................#..............................#......#..#.........#...............................#.......
  .............................#...............#............#..............................................................#........
  ...........#...................#......#......................#.......................#...............#......#.....................
  ..#..............................................#.........................#.............#...#.#..................................
  ................#.............................#....................................#.....#...................#..#.....#...........
  #............................#...#........................#................#....#.............................................#...
  ...............#.............#........#...................................................................#.......#....#..#.......
  ...........#......#.....#........................#.#..........................................#............#......................
  .#.....................................................#...............#.........................#................#...........#...
  .........................................#.............#......#.#....................................................#.........#..
  ................................#...#......................................................#..........................#..........#
  .#.........................#..............#.#.....................................................................................
  .........#..........#.............##.........#..#.................#........................#.....#.##....................#........
  ...................................................................................#...........................................#..
  ................#..........................................#...#...#.................................................#.........#..
  ..............................................#..............#..................#......#...#....#..#..............................
  ......#......#.................#.............#..................#...............#.............#..................#...............#
  .................................#.......#......#.......#.............................................................#........#..
  ..................#......#...................................#.................#.......#..........................................
  ....................#.........#.........................#..........#..........#..................#................................
  ..........#...........#...............#.#..................................................................................#......
  ..................#..#....................................................#..........#......#................................#....
  ............#.................................................................................................#........#..........
  .........#...............................................#.........##...........................#.................................
  ...#.........#........................................................#....................................#......................
  ........#......................#......#............#........#...............#.......................#.............................
  .......#..............................................................................................#....................#......
  .#.#..........#.......#.............##......................#..........................................................#..........
  ............#.#...........#............................................................#..........................................
  ............#..........................................................................#....................#...............#.....
  .......................#.....#...#........................................#.......#.........#.........................#...........
  ....................#..............#......#.......................................................................................
  ......................#....................................................................#...............#...#............#.....
  ........#..........#....................#...#........#......#..........................#....#..................#..#...............
  ................#...........................................................................................................#.....
  .#...............#..........................................................................................#......#..#.#.........
  ..............#................#...............#.........#.........#................................#.#...........................
  ...#................#..............#........................#...#.......................................#.#.......................
  #.........................................#..#....................................................................#...............
  .............#...........#.......#.#.....................................................................#.....#..................
  .............#..............................................................................#.....................................
  ........................#........#....#........#.#.............................................^..........#.......................
  ...............................#.......................................................#.............##.......#.......#...........
  #.#..............#..........................................#.......#..........................................#..................
  ...##...............................#........#.............##..................................................#..................
  ..#..#.................................................................#............#...#...#.....................................
  ....................#.#...#............#.......#.............#.......#..............#.............................................
  ..#..#.........#.............................................................................#......................#...#.........
  ....................................................#.........................#..#...#.#.#......#...............................#.
  ......#.....#.....................................................................#..............................................#
  ....................#........#..........................................................#.......#........................#........
  ................#.........................#...........................#...........................................#..............#
  ..#.......#..................................................#..................................#.................................
  ..........#.....................#...#.#...........#....................................#..........................................
  .....................................#...........................................................#..........#...................#.
  ....#............................#.........................................#.........................#............................
  ......#............#...........#......#.#..................................#......................................................
  ..................#.......#.....#......#.................................................................#................#.......
  ...........#.....#........................................................#.............#.........................................
  .................................#...........................#........#.........#............#.............................#.....#
  ..#........................#.................................#....................................................................
  ......................................................................................................#........#.#...#............
  #............................#..........#.#.....................#.............................................................#...
  .......#.......#................#..........#..........................#........#....#...#........................................#
  ....#.....#..........................................................#.........................#....................#..#.......#..
  .......#.............#.................................#...................................................................#......
  ...............#.......................................#.#...............................#.#..........#...........................
  ....#......#...#.#.........................#...............#...........#.......#........................................#..#......
  ...................#.........................................#.....................................................#..#.....#...#.
  ....#......#.#.............................#..........##........#......................#.#.......................#....#...........
  ........#.........................#........#.#..........................##..............#....#....................................
  .............#.....#..........#.....#.......#..##...#.....................#..................................#....................
  ....#....#...........................#...........#....................#.....#.......#....#.........#.....#....#...................
  ............#...#....................#..........#.......#......#............#.........................#............##.............
  .....................#.................................................................####.......................................
  ...#...........................................................................#......#..............#....#.......#...............
  ....#...#...#.....................#.............#..............................#...................#...........#..................
  ............................#...........#........#.............#..................................................................
  ...#.....#......#.....................#...........................................#...........#........#..........................
  .................#...........................#................................................................#..........#........
  .....................#........#...#...................................................................................#......#....
  .#...............................#...#....#.................#...#......#..........................................................
  ....................#..........#.........................................#....................#.........#.........................
  .......#.............#............#................#..........#.#.#.....................#............#.....................#......
  ......................#.........................#.................#...........................#................#..................
  ...#....#..........................#.#..##.................#..#..........#..............................................#.........
  ...........#.........................................................................................#.............#..............
  ..............#.................##...........#..#.............................................#..............................#....
  ...............................................##.......#..#.....#........#...#.............#.....................#...............
  ........#...................#...........#...............................#............................................#........#...
  ...................................#.....#......................#...#.........##..#...................#.#.........................
  ............#...........##............#.......................#.....#.......#...................#.................................
  ..#..#..............................#.......#.........#.....................................#.............#..#.................#..
  ..................#..................#..........................##..................#...#.......#.........#..................#....
  .........#.........#..............................................#...........................................................#...
  ......................#...........#..................................#............................#......#.....#..................
  .....#....#......#..................#.....#..............#.............................................#.....#....................
  ..............##...........#........................................................................#........#.#..................
  ..........#...............................##.......#............#.#.........#.....................................#....#..........
  .................................#..............#.............................#........................................#..........
  ....................#.................#..........#..............#.......................#...................................#.....
  ............#..............................#.............................#......#......#......................#...#...............
  .#..........#...............#..................................................................#....#.............................
  ....#............................................#......#..................#.....#............#.........................#.........`;

// const inputMap: string = `....#.....
// .........#
// ..........
// ..#.......
// .......#..
// ..........
// .#..^.....
// ........#.
// #.........
// ......#...`;

enum Direction {
  UP = 1,
  DOWN,
  LEFT,
  RIGHT,
}

class Coordinate {
  x: number;
  y: number;

  constructor(x: number, y: number) {
    this.x = x;
    this.y = y;
  }

  copy(): Coordinate {
    return new Coordinate(this.x, this.y);
  }

  getValue(map: string[][]): string {
    return map[this.y][this.x];
  }

  setValue(map: string[][], val: string) {
    map[this.y][this.x] = val;
  }
}

class ObstacleDetectedError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "ObstacleDetectedError";
  }
}

class InfiniteLoopDetectedError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "InfiniteLoopDetectedError";
  }
}

function outputMap(map: string[]) {
  for (var line of map) {
    console.log(line.join(""));
  }
}

function loadMap(inputMap: string): string[][] {
  const lines = inputMap.trim().split("\n");
  let map: string[][] = [];
  for (var line of lines) {
    map.push(line.trim().split(""));
  }
  console.log("Got map", map);
  return map;
}

function findStart(map: string[][]): Coordinate {
  for (var y = 0; y < map.length; y++) {
    for (var x = 0; x < map[0].length; x++) {
      if (map[y][x] == "^") {
        return new Coordinate(x, y);
      }
    }
  }
  return new Coordinate(0, 0);
}

function newDirection(dir: Direction): Direction {
  switch (dir) {
    case Direction.UP:
      return Direction.RIGHT;
    case Direction.RIGHT:
      return Direction.DOWN;
    case Direction.DOWN:
      return Direction.LEFT;
    case Direction.LEFT:
      return Direction.UP;
  }
}

function getDirectionChar(dir: Direction): string {
  switch (dir) {
    case Direction.UP:
      return "^";
    case Direction.DOWN:
      return "V";
    case Direction.LEFT:
      return "<";
    case Direction.RIGHT:
      return ">";
  }
}

function move(pos: Coordinate, dir: Direction): Coordinate | Error {
  let newPos = pos.copy();

  switch (dir) {
    case Direction.UP: {
      newPos.y -= 1;
      break;
    }
    case Direction.DOWN: {
      newPos.y += 1;
      break;
    }
    case Direction.LEFT: {
      newPos.x -= 1;
      break;
    }
    case Direction.RIGHT: {
      newPos.x += 1;
      break;
    }
  }

  // console.log(
  //   `Previous position was (${pos.x}, ${pos.y}). Next position will be (${newPos.x}, ${newPos.y})`,
  // );
  // Check to see if the new value is an open square. If it is, return the new coord. If it is not,
  // whether because it is out of the grid or because there is an obstacle, return an error
  if (newPos.y < 0 || newPos.y >= maxH || newPos.x < 0 || newPos.x >= maxH) {
    return new RangeError("New position out of bounds");
  } else if (newPos.getValue(map) === "#") {
    return new ObstacleDetectedError("Obstacle in the way");
  } else if (newPos.getValue(map) === "O") {
    return new InfiniteLoopDetectedError(
      "Found an infinite loop by hitting a placed obstacle.",
    );
  } else {
    return newPos;
  }
}

// How could we change this algorithm to find the loop-enablers?
//
// There may be some relationship where if we can find 3 blocks in a certain pattern, we know
// there is the ability to create a loop. What is that pattern?
//
// We will need to run the guard simulation to find the tiles he steps on so that we know if that
// would actually cause a look. We need to build a new method to look at each obstruction
// and look for the pattern.
//
// Example (1):     Example (2):    Example (Sample):
// .#....           .#....          ....#.....
// .....#           .....O          ....+---+#
// #.....           #.....          ....|...|.
// ....O.           ....#.          ..#.|...|.
//                                  ....|..#|.
//                                  ....|...|.
//                                  .#.O^---+.
//                                  ........#.
//                                  #.........
//                                  ......#...
//
// What are the relationships?
// - From the perspective of the top obstruction in example 1, there are obstructions on the two lines below it. They follow
// two axes, one can get vertically closer/further and the other horizontally. In this case, it seems like the rule
// is there must be an obstruction in the x-1 column and one in the y+1 row.
//
// Could it be as simple as keeping track of what squares we've visited, and if we are going to hit one we've already visited
// the next value would be a good place for an obstruction?
// - Answer: no, it isn't but there is an optimization here. We can check all tiles the guard visits, try placing an obstacle
//           there, and see if we end up back at that square. If we do, infinite loop.

function runSimulation(
  map: string[][],
  position: Coordinate,
  direction: Direction,
): boolean {
  let visited = 1;
  let steps = 0;

  // Starting from the start position, we are calling move() over and over. There are three conditions:
  // 1. We get a coordinate back. This means we can move and we should add 1 to visited and set the position to there.
  // 2. We get an error back. This means we cannot move and need to look at the error to determine why
  //     1. If it is because there is an obstacle, call nextDirection() and keep going
  //     2. If it is because we are off the grid, end iteration
  while (true) {
    if (steps > maxH * maxW) {
      return true;
    }

    const nextPos = move(position, direction);

    if (nextPos instanceof Error) {
      if (nextPos instanceof RangeError) {
        console.log(
          `Simulation complete. The guard will visit ${visited} squares.`,
        );
        break;
      } else if (nextPos instanceof ObstacleDetectedError) {
        console.log("Next position blocked. Turning right.");
        direction = newDirection(direction);
        console.log("Changing direction.");
      }
    } else {
      console.log(
        `Visited square (${nextPos.x}, ${nextPos.y}) with value ${nextPos.getValue(map)}`,
      );
      if (nextPos.getValue(map) !== "X") {
        visited += 1;
      }

      position.setValue(map, "X");
      position = nextPos;
      position.setValue(map, getDirectionChar(direction));
    }
    steps++;
  }
  return false;
}

function findLoopableObstructions(
  map: string[][],
  initialStart: Coordinate,
  initialDirection: Direction,
) {
  // This function takes in a map where all the tiles a guard steps on are marked with X and returns
  // the number of places where adding an obstruction would create an infinite loop. Also takes in information about
  // where the guard should start and what direction to go.
  //
  // We do this by looping over the full map, finding any tile where the guard stepped, and swapping that
  // to be an obstruction and then re-running the guard pathing simulation. If we return to the original path
  // then we have found a successful loop.

  // If the test has taken more than the entire number of steps the guard could take to cover the full puzzle,
  // we definitely should stop.
  let foundLoops = 0;
  const maxSteps = map.length * map[0].length;

  for (var y = 0; y < map.length; y++) {
    for (var x = 0; x < map[0].length; x++) {
      const coord = new Coordinate(x, y);

      // We found a tile that the guard stepped on during the simulation, run the obstacle checker
      if (coord.getValue(map) === "X") {
        console.log(
          `Square (${coord.x}, ${coord.y}) will be visited by the guard. Checking for obstructions.`,
        );
        const startCoord = coord;
        startCoord.setValue(map, "O");
        const loopFound = runSimulation(
          map,
          initialStart,
          initialDirection,
          maxSteps,
        );
        startCoord.setValue(map, "X");

        if (loopFound) {
          foundLoops++;
        }
      }
    }
  }
  console.log(`Found ${foundLoops} possible places to create infinite loops.`);
}

function solve(map: string[][]): number {
  let initialDirection = Direction.UP;
  let initialPosition = findStart(map);

  // Run the regular simulation to find all the squares the guard would normally visit
  runSimulation(map, initialPosition, initialDirection, Infinity);
  outputMap(map);
  findLoopableObstructions(map, initialPosition, initialDirection);
}

let map = loadMap(inputMap);
const maxH = map.length;
const maxW = map[0].length;

solve(map);
